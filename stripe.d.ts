/** Declaration file generated by dts-gen */

export = stripe;

declare class stripe {
    constructor(key: any, version: any);

    getApiField(...args: any[]): void;

    getAppInfoAsString(...args: any[]): void;

    getClientId(...args: any[]): void;

    getClientUserAgent(...args: any[]): void;

    getClientUserAgentSeeded(...args: any[]): void;

    getConstant(c: any): any;

    getInitialNetworkRetryDelay(...args: any[]): void;

    getMaxNetworkRetries(...args: any[]): void;

    getMaxNetworkRetryDelay(...args: any[]): void;

    getTelemetryEnabled(...args: any[]): void;

    setApiKey(...args: any[]): void;

    setApiVersion(...args: any[]): void;

    setAppInfo(...args: any[]): void;

    setClientId(...args: any[]): void;

    setHost(...args: any[]): void;

    setHttpAgent(...args: any[]): void;

    setMaxNetworkRetries(...args: any[]): void;

    setPort(...args: any[]): void;

    setProtocol(...args: any[]): void;

    setTelemetryEnabled(...args: any[]): void;

    setTimeout(...args: any[]): void;

    static DEFAULT_API_VERSION: any;

    static DEFAULT_BASE_PATH: string;

    static DEFAULT_HOST: string;

    static DEFAULT_PORT: string;

    static DEFAULT_TIMEOUT: number;

    static INITIAL_NETWORK_RETRY_DELAY_SEC: number;

    static MAX_NETWORK_RETRY_DELAY_SEC: number;

    static PACKAGE_VERSION: string;

    static Stripe: any;

    static USER_AGENT: {
        bindings_version: string;
        lang: string;
        lang_version: string;
        platform: string;
        publisher: string;
        uname: any;
    };

    static USER_AGENT_SERIALIZED: any;

}

declare namespace stripe {
    class StripeResource {
        constructor(stripe: any, deprecatedUrlData: any, ...args: any[]);

        createFullPath(...args: any[]): void;

        createResourcePathWithSymbols(...args: any[]): void;

        initialize(...args: any[]): void;

        wrapTimeout(promise: any, callback: any): any;

        static MAX_BUFFERED_REQUEST_METRICS: number;

        static extend(...args: any[]): void;

        static method(spec: any): any;

    }

    class errors {
        constructor(raw: any, ...args: any[]);

        populate(type: any, message: any): void;

        static StripeAPIError(...args: any[]): void;

        static StripeAuthenticationError(...args: any[]): void;

        static StripeCardError(...args: any[]): void;

        static StripeConnectionError(...args: any[]): void;

        static StripeIdempotencyError(...args: any[]): void;

        static StripeInvalidGrantError(...args: any[]): void;

        static StripeInvalidRequestError(...args: any[]): void;

        static StripePermissionError(...args: any[]): void;

        static StripeRateLimitError(...args: any[]): void;

        static StripeSignatureVerificationError(...args: any[]): void;

        static extend(...args: any[]): void;

    }

    namespace StripeResource {
        namespace BASIC_METHODS {
            function create(args: any): any;

            function del(args: any): any;

            function list(args: any): any;

            function retrieve(args: any): any;

            function update(args: any): any;

        }

    }

    namespace errors {
        class StripeError {
            constructor(...args: any[]);

            populate(...args: any[]): void;

            static captureStackTrace(p0: any, p1: any): any;

            static extend(...args: any[]): void;

            static generate(...args: any[]): void;

            static stackTraceLimit: number;

        }

        namespace StripeAPIError {
            const stackTraceLimit: number;

            function captureStackTrace(p0: any, p1: any): any;

            function extend(...args: any[]): void;

            function generate(...args: any[]): void;

        }

        namespace StripeAuthenticationError {
            const stackTraceLimit: number;

            function captureStackTrace(p0: any, p1: any): any;

            function extend(...args: any[]): void;

            function generate(...args: any[]): void;

        }

        namespace StripeCardError {
            const stackTraceLimit: number;

            function captureStackTrace(p0: any, p1: any): any;

            function extend(...args: any[]): void;

            function generate(...args: any[]): void;

        }

        namespace StripeConnectionError {
            const stackTraceLimit: number;

            function captureStackTrace(p0: any, p1: any): any;

            function extend(...args: any[]): void;

            function generate(...args: any[]): void;

        }

        namespace StripeIdempotencyError {
            const stackTraceLimit: number;

            function captureStackTrace(p0: any, p1: any): any;

            function extend(...args: any[]): void;

            function generate(...args: any[]): void;

        }

        namespace StripeInvalidGrantError {
            const stackTraceLimit: number;

            function captureStackTrace(p0: any, p1: any): any;

            function extend(...args: any[]): void;

            function generate(...args: any[]): void;

        }

        namespace StripeInvalidRequestError {
            const stackTraceLimit: number;

            function captureStackTrace(p0: any, p1: any): any;

            function extend(...args: any[]): void;

            function generate(...args: any[]): void;

        }

        namespace StripePermissionError {
            const stackTraceLimit: number;

            function captureStackTrace(p0: any, p1: any): any;

            function extend(...args: any[]): void;

            function generate(...args: any[]): void;

        }

        namespace StripeRateLimitError {
            const stackTraceLimit: number;

            function captureStackTrace(p0: any, p1: any): any;

            function extend(...args: any[]): void;

            function generate(...args: any[]): void;

        }

        namespace StripeSignatureVerificationError {
            const stackTraceLimit: number;

            function captureStackTrace(p0: any, p1: any): any;

            function extend(...args: any[]): void;

            function generate(...args: any[]): void;

        }

    }

    namespace resources {
        class Account {
            constructor(args: any);

            create(args: any): any;

            createExternalAccount(args: any): any;

            createLoginLink(args: any): any;

            createPerson(args: any): any;

            del(args: any): any;

            deleteExternalAccount(args: any): any;

            deletePerson(args: any): any;

            list(args: any): any;

            listCapabilities(args: any): any;

            listExternalAccounts(args: any): any;

            listPersons(args: any): any;

            reject(args: any): any;

            retrieve(...args: any[]): void;

            retrieveCapability(args: any): any;

            retrieveExternalAccount(args: any): any;

            retrievePerson(args: any): any;

            update(args: any): any;

            updateCapability(args: any): any;

            updateExternalAccount(args: any): any;

            updatePerson(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class AccountLinks {
            constructor(args: any);

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class Accounts {
            constructor(args: any);

            create(args: any): any;

            createExternalAccount(args: any): any;

            createLoginLink(args: any): any;

            createPerson(args: any): any;

            del(args: any): any;

            deleteExternalAccount(args: any): any;

            deletePerson(args: any): any;

            list(args: any): any;

            listCapabilities(args: any): any;

            listExternalAccounts(args: any): any;

            listPersons(args: any): any;

            reject(args: any): any;

            retrieve(...args: any[]): void;

            retrieveCapability(args: any): any;

            retrieveExternalAccount(args: any): any;

            retrievePerson(args: any): any;

            update(args: any): any;

            updateCapability(args: any): any;

            updateExternalAccount(args: any): any;

            updatePerson(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class ApplePayDomains {
            constructor(args: any);

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class ApplicationFees {
            constructor(args: any);

            createRefund(args: any): any;

            listRefunds(args: any): any;

            retrieveRefund(args: any): any;

            updateRefund(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class Balance {
            constructor(args: any);

            retrieve(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class BalanceTransactions {
            constructor(args: any);

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class BitcoinReceivers {
            constructor(args: any);

            listTransactions(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class Charges {
            constructor(args: any);

            capture(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class CountrySpecs {
            constructor(args: any);

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class Coupons {
            constructor(args: any);

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class CreditNotes {
            constructor(args: any);

            voidCreditNote(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class Customers {
            constructor(args: any);

            createBalanceTransaction(args: any): any;

            createSource(args: any): any;

            createTaxId(args: any): any;

            deleteDiscount(args: any): any;

            deleteSource(args: any): any;

            deleteTaxId(args: any): any;

            listBalanceTransactions(args: any): any;

            listSources(args: any): any;

            listTaxIds(args: any): any;

            retrieveBalanceTransaction(args: any): any;

            retrieveSource(args: any): any;

            retrieveTaxId(args: any): any;

            updateBalanceTransaction(args: any): any;

            updateSource(args: any): any;

            verifySource(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class Disputes {
            constructor(args: any);

            close(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class EphemeralKeys {
            constructor(args: any);

            create(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class Events {
            constructor(args: any);

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class ExchangeRates {
            constructor(args: any);

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class FileLinks {
            constructor(args: any);

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class Files {
            constructor(args: any);

            create(args: any): any;

            requestDataProcessor(method: any, data: any, headers: any, callback: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class InvoiceItems {
            constructor(args: any);

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class Invoices {
            constructor(args: any);

            finalizeInvoice(args: any): any;

            listLineItems(args: any): any;

            listUpcomingLineItems(args: any): any;

            markUncollectible(args: any): any;

            pay(args: any): any;

            retrieveUpcoming(args: any): any;

            sendInvoice(args: any): any;

            voidInvoice(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class IssuerFraudRecords {
            constructor(args: any);

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class OAuth {
            constructor(args: any);

            authorizeUrl(...args: any[]): void;

            deauthorize(...args: any[]): void;

            token(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class OrderReturns {
            constructor(args: any);

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class Orders {
            constructor(args: any);

            pay(args: any): any;

            returnOrder(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class PaymentIntents {
            constructor(args: any);

            cancel(args: any): any;

            capture(args: any): any;

            confirm(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class PaymentMethods {
            constructor(args: any);

            attach(args: any): any;

            detach(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class Payouts {
            constructor(args: any);

            cancel(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class Plans {
            constructor(args: any);

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class Products {
            constructor(args: any);

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class Recipients {
            constructor(args: any);

            createCard(args: any): any;

            deleteCard(args: any): any;

            listCards(args: any): any;

            retrieveCard(args: any): any;

            updateCard(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class Refunds {
            constructor(args: any);

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class Reviews {
            constructor(args: any);

            approve(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class SetupIntents {
            constructor(args: any);

            cancel(args: any): any;

            confirm(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class Skus {
            constructor(args: any);

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class Sources {
            constructor(args: any);

            listSourceTransactions(args: any): any;

            verify(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class SubscriptionItems {
            constructor(args: any);

            createUsageRecord(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class SubscriptionSchedules {
            constructor(args: any);

            cancel(args: any): any;

            release(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class Subscriptions {
            constructor(args: any);

            deleteDiscount(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class TaxRates {
            constructor(args: any);

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class ThreeDSecure {
            constructor(args: any);

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class Tokens {
            constructor(args: any);

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class Topups {
            constructor(args: any);

            cancel(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class Transfers {
            constructor(args: any);

            createReversal(args: any): any;

            listReversals(args: any): any;

            retrieveReversal(args: any): any;

            updateReversal(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class UsageRecordSummaries {
            constructor(args: any);

            list(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class UsageRecords {
            constructor(args: any);

            create(args: any): any;

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        class WebhookEndpoints {
            constructor(args: any);

            static MAX_BUFFERED_REQUEST_METRICS: number;

            static extend(...args: any[]): void;

            static method(spec: any): any;

        }

        function Checkout(stripe: any): any;

        function Issuing(stripe: any): any;

        function Radar(stripe: any): any;

        function Reporting(stripe: any): any;

        function Sigma(stripe: any): any;

        function Terminal(stripe: any): any;

        namespace Account {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace AccountLinks {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace Accounts {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace ApplePayDomains {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace ApplicationFees {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace Balance {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace BalanceTransactions {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace BitcoinReceivers {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace Charges {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace CountrySpecs {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace Coupons {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace CreditNotes {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace Customers {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace Disputes {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace EphemeralKeys {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace Events {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace ExchangeRates {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace FileLinks {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace Files {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace InvoiceItems {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace Invoices {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace IssuerFraudRecords {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace OAuth {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace OrderReturns {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace Orders {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace PaymentIntents {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace PaymentMethods {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace Payouts {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace Plans {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace Products {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace Recipients {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace Refunds {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace Reviews {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace SetupIntents {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace Skus {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace Sources {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace SubscriptionItems {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace SubscriptionSchedules {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace Subscriptions {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace TaxRates {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace ThreeDSecure {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace Tokens {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace Topups {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace Transfers {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace UsageRecordSummaries {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace UsageRecords {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

        namespace WebhookEndpoints {
            namespace BASIC_METHODS {
                function create(args: any): any;

                function del(args: any): any;

                function list(args: any): any;

                function retrieve(args: any): any;

                function update(args: any): any;

            }

        }

    }

    namespace webhooks {
        const DEFAULT_TOLERANCE: number;

        function constructEvent(...args: any[]): void;

        function generateTestHeaderString(opts: any): any;

        namespace signature {
            const EXPECTED_SCHEME: string;

            function verifyHeader(...args: any[]): void;

        }

    }

}

